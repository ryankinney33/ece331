1.
#!/usr/bin/perl

my @lengths;

# Open the file with error checking
open(f, '<', '/usr/share/dict/words') or die $!;

while (<f>) {
	# Remove new line and get the length
	chomp;
	$len = length;

	# Increment counter if it exists
	if (exists($lengths[$len])) {
		$lengths[$len]++;
	} else {
		$lengths[$len] = 1;
	}
}

# print the lengths
print "Length\tNumber\n";
for my $i (1 .. $#lengths) {
	if (exists($lengths[$i])) {
		print "$i\t$lengths[$i]\n";
	}
}

2.
EXE = main
CC = gcc
CFLAGS = -g -Wall -O2

.PHONY: all clean

all: $(EXE)

$(EXE): %: %.c
	$(CC) $(CFLAGS) -o $@ $<

clean:
	rm -rf $(EXE) *.o core*

3.
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>
#include <unistd.h>

int main ()
{
	// Spawn a child process
	pid_t chld = fork();
	if (chld < 0) {
		perror("fork");
		return 1;
	} else if (chld) {
		// parent process
		printf("Parent: defenselessly sleeping...\n");
		if (wait(NULL) < 0) {// wait for the child
			perror("wait");
		} else {
			// The child process exited without killing the parent
			fprintf(stderr, "I am invincible! (not really...)\n");
		}
		return 1; // this should not normally be executed
	} else {
		// child process; commit parricide
		printf("Child: murdering parent!\n");
		if (kill(getppid(), SIGKILL) < 0) {
			perror ("kill"); // an error occurred
			return 1;
		}
	}
	return 0;
}

4.
    enscript ECE331_hw06.txt -b '$n %E $C|$%|Ryan Kinney' -f Courier12 -F Courier12
