1.
    The cron job runs on the 8th minute past every 6 hours on the following days:
    Tuesdays, Thursdays, Saturdays, and the 5th day of every month.

    In summary, it runs at 12:08 AM, 6:08 AM, 12:08 PM, and 6:08 PM on Tuesdays,
    Thursdays, Saturdays, and the 5th day of every month.

2.
#!/usr/bin/python3
import re
# Read in entire dictionary
with open("/usr/share/dict/words") as f:
    w=f.readlines()

# Match strings without capital letters, symbols, and d, s, t, e, n, g, and y
w=[m.string for l in w for m in [re.search(r'^[^\WA-Zdstengy]{5}$',l.strip())]if m]

# Match strings with an a, i, and l
w=[m.string for l in w for m in [re.search(r'(?=.*a)(?=.*i)(?=.*l)', l)] if m]

# Match strings without i, a, and l in the positions they can't be in
[print(m.string) for l in w for m in [re.search(r'.[^i].[^a][^l]', l)] if m]

3.
    a.
	I would notify my supervisor abotu the incident. I would then check for
	any unknown processes or services that are running, which could be
	rootkits, for example. I would then check the firewall settings and
	other system logs for information about what happened.
    b.
	I would notify both Adam and my supervisor about the incident. If
	permitted, I would correct the firewall settings and stop the
	malicious services and processes if I can find them. I would then
	secure the passphrase for Adam's account. Because this may destroy
	evidence, I would not restore from a backup unless I was expressly
	told to because that may destroy evidence.
4.
    Example 1:
	IP = 2.201.50.25
	NM = /11 = 255.224.0.0
	NA = IP & NM = 2.201.50.45 & 255.224.0.0 = 2.192.0.0
	BA = NA | ~NM = 2.192.0.0 | 0.31.255.255 = 2.223.255.255
    Example 2:
	NA = 105.223.0.0
	BA = 105.223.31.255
	IP = NA + 1 to BA - 1 ==> 105.223.0.31 is an example
	NM = ~BA | NA = 150.32.224.0 | 105.223.0.0 = 255.255.224.0 = /19
  ----------------------------------------------------------------------------
  |  Network (DDN)  |       IP (DDN)       | Netmask(CIDR) | Broadcast (DDN) |
  |-----------------|----------------------|---------------|-----------------|
  |    2.192.0.0    |      2.201.50.45     |      /11      |  2.223.255.255  |
  |-----------------|----------------------|---------------|-----------------|
  |   105.223.0.0   |     105.223.0.31     |      /19      | 105.223.31.255  |
  ---------------------------------------------------------------------------

5.
    a.
	No, the code segment will not always operate as expected.
    b.
	While the lock is held, an error can occur in lcd_dwrite('X').
	When this happens, the function returns -EINVAL without first
	releasing the lock. This causes a deadlock, which is not what
	the programmer wanted to happen (probably). Also, if the call
	to mutex_lock_interruptible(&lcd_lock) is interrupted (so the
	lock is not acquired), it tries to release the lock. However,
	a thread releasing a lock it does not hold is undefined behaviors,
	which is unpredictable at best.
    c.
	To fix the posible deadlock, the lock needs to be released any time it
	is acquired. One fix that needs to be made is to release the lock if
	lcd_dwrite('X') fails. To do this, add mutex_unlock(&lcd_lock) before
	"return -EINVAL" in the block where lcd_dwrite('X') returns nonzero.
	Also the code dedicated to error handling is not called in that case too.
	Instead of returning -EINVAL, ret should be set to -EINVAL (ret = -EINVAL)
	and instead of returning, "goto fail;" should be used. To fix
	the undefined behavior of releasing an unacquired lock, simply remove
	the mutex_unlock(&lcd_lock) from the interrupted system call case.

6.
    a.
	CREATE TABLE albums(Date TEXT, Time TEXT, Artist TEXT, Album TEXT,
                            Song TEXT, Album_num INTEGER);
    b.
	INSERT INTO albums(Date, Time, Artist, Album, Song, Album_num)
	VALUES("04-25-2019", "08:01:45", "Meatloaf", "Bat Out of Hell",
	       "Objects", 34874);
    c.
	SELECT * FROM albums WHERE Album_num > 10000;
7.
    enscript ECE331_hw11.txt -b '$n %E $C|$%|Ryan Kinney' -f Courier11 -F Courier11
