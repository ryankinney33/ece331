1.
# Usage
# make		Compile the binary
# make clean	Remove all binaries and object files
TARGET = hw1q5
OBJS = hw1q5.o
CC = gcc
CFLAGS = -Wall -g

all: $(TARGET)

$(TARGET): $(OBJS)
	$(CC) $(OBJS) $(CFLAGS) -o $(TARGET)

clean:
	rm -f $(TARGET) $(OBJS) core*

2a.
    The program for homework 1 question 5 was compiled with the following command:
	gcc -o hw1q5 -g -Wall hw1q5.c
    The resulting binary did NOT combine the two loops together.

2b.
    The assembly for the program was obtained with the following command:
	objdump -l --disassemble=main ./hw1q5 > temp.asm
    The resulting file, temp.asm, contains the assembly instructions for the program,
    but also includes the line numbers in the C source file that correspond
    to the instuctions. In the source file compiled for this problem, the two
    loops begin on lines 40 and 43. In the assembly, there were three markers each for
    those two lines. The first sets the value of the iterator to 0 before branching
    into the loop, the second increments the iterator, and the third performs the
    comparison to see if the loop should continue. Once the first loop is completed,
    the next instructions set the iterator for the second loop before branching into it.
    The relevant output from the above command is shown below.

/home/pi/Documents/ece331/hw03/hw1q5.c:40
   105f0:	e3a03000 	mov	r3, #0
   105f4:	e50b3008 	str	r3, [fp, #-8]
   105f8:	ea00000d 	b	10634 <main+0xe4>
/home/pi/Documents/ece331/hw03/hw1q5.c:31
   105fc:	e59f00ac 	ldr	r0, [pc, #172]	; 106b0 <main+0x160>
   10600:	ebffff7e 	bl	10400 <puts@plt>
/home/pi/Documents/ece331/hw03/hw1q5.c:32
   10604:	e3a03000 	mov	r3, #0
   10608:	ea000025 	b	106a4 <main+0x154>
/home/pi/Documents/ece331/hw03/hw1q5.c:41 (discriminator 3)
   1060c:	ebffff8a 	bl	1043c <rand@plt>
   10610:	e1a01000 	mov	r1, r0
   10614:	e51b3008 	ldr	r3, [fp, #-8]
   10618:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1061c:	e0823003 	add	r3, r2, r3
   10620:	e6ef2071 	uxtb	r2, r1
   10624:	e5c32000 	strb	r2, [r3]
/home/pi/Documents/ece331/hw03/hw1q5.c:40 (discriminator 3)
   10628:	e51b3008 	ldr	r3, [fp, #-8]
   1062c:	e2833001 	add	r3, r3, #1
   10630:	e50b3008 	str	r3, [fp, #-8]
/home/pi/Documents/ece331/hw03/hw1q5.c:40 (discriminator 1)
   10634:	e51b2008 	ldr	r2, [fp, #-8]
   10638:	e51b3010 	ldr	r3, [fp, #-16]
   1063c:	e1520003 	cmp	r2, r3
   10640:	bafffff1 	blt	1060c <main+0xbc>
/home/pi/Documents/ece331/hw03/hw1q5.c:43
   10644:	e3a03000 	mov	r3, #0
   10648:	e50b3008 	str	r3, [fp, #-8]
   1064c:	ea00000a 	b	1067c <main+0x12c>
/home/pi/Documents/ece331/hw03/hw1q5.c:44 (discriminator 3)
   10650:	e51b3008 	ldr	r3, [fp, #-8]
   10654:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10658:	e0823003 	add	r3, r2, r3
   1065c:	e5d33000 	ldrb	r3, [r3]
   10660:	e1a02003 	mov	r2, r3
   10664:	e51b300c 	ldr	r3, [fp, #-12]
   10668:	e0833002 	add	r3, r3, r2
   1066c:	e50b300c 	str	r3, [fp, #-12]
/home/pi/Documents/ece331/hw03/hw1q5.c:43 (discriminator 3)
   10670:	e51b3008 	ldr	r3, [fp, #-8]
   10674:	e2833001 	add	r3, r3, #1
   10678:	e50b3008 	str	r3, [fp, #-8]
/home/pi/Documents/ece331/hw03/hw1q5.c:43 (discriminator 1)
   1067c:	e51b2008 	ldr	r2, [fp, #-8]
   10680:	e51b3010 	ldr	r3, [fp, #-16]
   10684:	e1520003 	cmp	r2, r3
   10688:	bafffff0 	blt	10650 <main+0x100>
/home/pi/Documents/ece331/hw03/hw1q5.c:46
   1068c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   10690:	ebffff54 	bl	103e8 <free@plt>

3a.
    The following command counts regular files with 1, 2, or 3 characters
    in '/usr/lib'. Note: this does not search all the subdirectories in
    '/usr/lib' recursively. In order to search recursively, add 'R' to the
    '-lqa' in the command. The regular expression looks for lines that start
    with '-' meaning the file is a regular file. It then looks for lines that
    end with a space followed by 1, 2, or 3 characters.
/usr/bin/ls -lqA /usr/lib | grep -cE '^-.+ .{1,3}$'

3b.
    There were 0 regular files with 1, 2, or 3 characters in /usr/lib

4.
/* FILE: gpio_q4.h */
#ifndef _GPIO_Q4_H_
#define _GPIO_Q4_H_

/* Exports the passed GPIO pin */
int gpio_export(int pin);

/* Unexports the passed GPIO pin */
int gpio_unexport(int pin);

/* Sets the passed pin to either high or low */
int gpio_value(int pin, int value);

/* Sets the passed pin as input or output */
int gpio_direction(int pin, char *direction);

#endif /* _GPIO_Q4_H_ */

/* FILE: gpio_q4.c */
#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>

#include "gpio_q4.h"

/* Exports the passed GPIO pin */
int gpio_export(int pin)
{
	/* Open the file to export the GPIO pin */
	int fd = open("/sys/class/gpio/export", O_WRONLY);
	if (fd < 0) { /* error checking */
		return 1;
	}

	/* Write the pin number to export it and perform error checking */
	if (dprintf(fd, "%d", pin) < 0) {
		close(fd);
		return 1;
	}

	close(fd);
	return 0;
}

/* Unexports the passed GPIO pin */
int gpio_unexport(int pin)
{
	/* Open the file to unexport the GPIO pin */
	int fd = open("/sys/class/gpio/unexport", O_WRONLY);
	if (fd < 0) { /* error checking */
		return 1;
	}

	/* Write the pin number to unexport it and perform error checking */
	if (dprintf(fd, "%d", pin) < 0) {
		close(fd);
		return 1;
	}

	close(fd);
	return 0;
}

/* Sets the passed pin to either high or low */
int gpio_value(int pin, int value)
{
	char path[50]; /* Holds the path of the file to be opened */

	if (value != 0 && value != 1)
		return 1; /* Sanity check */

	/* Generate the path depending on the passed pin number */
	snprintf(path, 50, "/sys/class/gpio/gpio%d/value", pin);

	/* Open the file and attempt to write the value */
	int fd = open(path, O_WRONLY);
	if (fd < 0) { /* error checking */
		return 1;
	} else if (dprintf(fd, "%d", value) < 0) {
		close(fd);
		return 1;
	}

	close(fd);
	return 0;
}

/* Sets the passed pin as input or output */
int gpio_direction(int pin, char *direction)
{
	char path[50]; /* Holds the path of the file to be opened */

	/* Perform some error checking */
	if (direction == NULL || (strcmp(direction, "out") != 0
				&& strcmp(direction, "in") != 0)) {
		return 1;
	}

	/* Generate the path depending on the passed pin number */
	snprintf(path, 50, "/sys/class/gpio/gpio%d/direction", pin);

	/* Open the file and attempt to write the direction */
	int fd = open(path, O_WRONLY);
	if (fd < 0) { /* error checking */
		return 1;
	}
	if (dprintf(fd, "%s", direction) < 0) {
		close(fd);
		return 1;
	}

	close(fd);
	return 0;
}

/* FILE: main.c */
#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <signal.h>
#include <unistd.h>
#include "gpio_q4.h"

#define PIN_NUM 17

static int blink = 1;

/* Clears the blink flag to exit the program cleanly */
void int_handler()
{
	blink = 0;
}

/*
 * Sets the GPIO corresponding to PIN_NUM as an output
 * and toggles the pin with a frequency of approximately 1 Hz.
 * Uses the deprecated gpio sysfs interface.
 */
int main(int argc, char *argv[])
{
	/* Try to trap SIGINT for graceful program exit */
	struct sigaction ctrlc;
	ctrlc.sa_handler = int_handler;
	if (sigaction(SIGINT, &ctrlc, NULL) < 0) {
		fprintf(stderr, "Error from sigaction: %s\n", strerror(errno));
		return 1;
	}

	/* Initialize GPIO17 for output */
	if (gpio_export(PIN_NUM)) {
		fprintf(stderr, "Error exporting GPIO%d: %s\n",
				PIN_NUM, strerror(errno));
		return 1;
	}
	usleep(1000); /* short delay */
	if (gpio_direction(PIN_NUM, "out")) {
		fprintf(stderr, "Error setting direction: %s\n",
				strerror(errno));
		gpio_unexport(PIN_NUM);
		return 1;
	}

	/* Set the pin high, wait 0.5 secs, set the pin low, wait 0.5 secs */
	while (blink) {
		if (gpio_value(PIN_NUM, 1)) {
			fprintf(stderr, "Error setting value: %s\n",
					strerror(errno));
			gpio_unexport(PIN_NUM);
			return 1;
		}
		usleep(500000);
		if (gpio_value(PIN_NUM, 0)) {
			fprintf(stderr, "Error setting value: %s\n",
					strerror(errno));
			gpio_unexport(PIN_NUM);
			return 1;
		}
		usleep(500000);
	}

	/* Done blinking; Unexport the GPIO pin and exit the program */
	if (gpio_unexport(PIN_NUM) < 0) {
		fprintf(stderr, "Error unexporting GPIO%d: %s\n",
				PIN_NUM, strerror(errno));
		return 1;
	}
	printf("\n");

	return 0;
}

5.
    sudo apt update && sudo apt upgrade -y
    sudo apt install flex libssl-dev
    cd /usr/src
    sudo git clone https://github.com/raspberrypi/linux.git
    sudo mv linux linux-`uname -r`
    cd linux-`uname -r`
    sudo git checkout rpi-5.10.y
    sudo make mrproper
    sudo modprobe configs
    gunzip -c /proc/config.gz > ~/.config
    sudo mv ~/.config .config
    sudo wget https://raw.githubusercontent.com/raspberrypi/\
firmware/master/extra/Module7l.symvers -O /boot/Module7l.symvers
    sudo ln -s /boot/Module7l.symvers Module.symvers
    sudo make modules_prepare
    sudo ln -s `pwd` /lib/modules/`uname -r`/build
    sudo ln -s /lib/modules/`uname -r`/build /lib/modules/`uname -r`/source

6.
	enscript ECE331_hw03.txt -b '$n %E $C|$%|Ryan Kinney' -F Courier10
