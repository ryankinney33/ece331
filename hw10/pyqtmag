#!/usr/bin/python3

# Need to install python3-pyqt5.qtx11extras
import sys
from PyQt5.QtGui import  *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtX11Extras import *

class XMagQLabel(QLabel):
	def setLabel(self, label):
		self.label=label

	def setqimage(self, qimage):
		self.qimage=qimage

	def mouseMoveEvent(self, event):
		# Check bounds
		if event.x()>=self.qimage.width():
			return
		if event.y()>=self.qimage.height():
			return
		if event.x()<0:
			return
		if event.y()<0:
			return
		c=self.qimage.pixelColor(event.pos())
		t="Color [{x:3d},{y:3d}] ({r:2X},{g:2X},{b:2X},{a:2X})".format(x=event.x(),y=event.y(),r=c.red(),g=c.green(),b=c.blue(),a=c.alpha())
		self.label.setText(t)

class XMagQWidget(QWidget):
	replace=False

	def setParent(self,parent):
		self.parent=parent

	def mouseReleaseEvent(self,event):
		if self.replace==False:
			return
		self.replace=False
		self.releaseMouse()
		self.parent.update(event.globalPos())

	def update(self,tf):
		self.replace=tf

class pyqtmag:
	scale_factor = 400 # 400 percent
	image_present = False

	def __init__(self):
		# Create the window and set the size/position/title appropriately
		self.app=QApplication(sys.argv)
		self.w=XMagQWidget()
		self.w.setGeometry(100,100,200,200)
		self.w.setWindowTitle('PyQtMag')

		# Add a grid-style layout for the widgets
		self.layout=QGridLayout()
		self.w.setLayout(self.layout)

		# Add a button to replace the grabbed image
		self.replace=QPushButton("Replace")
		self.replace.clicked.connect(self.replace_cb)
		self.layout.addWidget(self.replace,1,1,1,1)

		# A slider to adjust the scaling
		self.slider = QSlider(Qt.Horizontal)
		self.slider.setFocusPolicy(Qt.StrongFocus)

		# Minimum and maximum values = scaling %
		self.slider.setMinimum(100)
		self.slider.setMaximum(1500);
		self.slider.setValue(self.scale_factor)
		self.slider.setTickPosition(QSlider.TicksBothSides)
		self.slider.setTickInterval(100)
		self.slider.sliderReleased.connect(self.change_scale)
		self.layout.addWidget(self.slider, 2,1,1,2)

		# Add a widget to show the captured image
		self.label=XMagQLabel()
		self.qimage=QImage()
		self.layout.addWidget(self.label,3,1,1,2)
		self.label.setqimage(self.qimage)

		# A widget to show the color of a pixel in the image
		self.info=QLabel("Color")
		self.layout.addWidget(self.info,4,1,1,2)
		self.label.setLabel(self.info)

		# Add a quit button to the gui
		self.quit=QPushButton("Quit")
		self.quit.clicked.connect(self.quit_cb)
		self.layout.addWidget(self.quit,5,2,1,1)

		# Add an option to save the grabbed image
		self.save = QPushButton("Save")
		self.save.clicked.connect(self.save_img)
		self.layout.addWidget(self.save,5,1,1,1)

		# Show the window
		self.rootwindow=QX11Info.appRootWindow()
		self.w.show()
		self.window=self.app.allWindows()
		self.w.setParent(self)

	def start(self):
		self.app.exec_()

	def quit_cb(self):
		quit()

	def replace_cb(self):
		# Allow mouse to move around to grab a spot
		pm=QPixmap('cursor.png')
		cursor=QCursor(pm,hotX=0,hotY=0)
		self.w.grabMouse(cursor)
		self.w.update(True)

	# Save the captured (unscaled) image to a file
	def save_img(self):
		if not self.image_present:
			print('Error: no image captured', file = sys.stderr)
			return

		# Open a save file dialogue for the user
		name,_ = QFileDialog.getSaveFileName(None, 'Save file', 'screenshot.png', '*.png')

		if name: # do nothing if no name was selected (dialog closed?)
			# Attempt to save the file
			try:
				self.pixmap.save(name, 'PNG')
				print('Saved file as:', name)
			except Exception as e:
				print(e, file = sys.stderr)

	def change_scale(self):
		self.scale_factor = self.slider.value()
		self.scale_image()

	def scale_image(self):
		if self.image_present:
			# Scale the image based on the scale factor (pyqt**MAG**)
			self.size= self.scale_factor//100 * self.pixmap.size()
			self.pixmap_scaled=self.pixmap.scaled(self.size)
			self.qimage=self.pixmap_scaled.toImage()

			# Show the scaled image
			self.label.setPixmap(self.pixmap_scaled)
			self.label.setqimage(self.qimage)
			self.w.setFixedSize(self.layout.sizeHint()) # Automatically fix the window size

	def update(self,pos):
		self.image_present = True

		# Create a QRect for the wanted image
		want = QRect(pos, QSize(50,50))
		screen = self.app.screenAt(pos)
		# The intersection of the screen and the wanted image gives the actual image
		inter = want.intersected(screen.geometry())

		# Grab an image at the cursor location (cursor at top left corner)
		self.pixmap=screen.grabWindow(self.rootwindow,inter.x(),inter.y(),inter.width(),inter.height())

		# Scale and show the image
		self.scale_image()


# Create the gui and start the app
if __name__=='__main__':
	app=pyqtmag()
	app.start()

